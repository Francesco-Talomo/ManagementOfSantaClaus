@using ManagementOfSantaClaus.Classes
@model ManagementOfSantaClaus.Models.Order

@{
  ViewBag.Title = "Edit";
}

<h2>Edit</h2>
<hr />

<div class="jumbotron">
  @using (Html.BeginForm("Save", "Orders"))
  {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
      <h3>Order</h3>
      <hr />
      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      @Html.HiddenFor(model => model.Id)

      <div class="form-group">
        @Html.LabelFor(model => model.Kid, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.DisplayFor(model => model.Kid)
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @if (!Model.Status.Equals(StatusType.Done))
        {
            <select id="StatusType" name="StatusType" class="btn btn-default dropdown-toggle">
              @foreach (var statusType in Enum.GetValues(typeof(StatusType)))
              {

                if (Model.Status.Equals(statusType))
                {
                  <option value="@statusType" selected="selected">@statusType</option>
                }
                else
                {
                  <option value="@statusType">@statusType</option>
                }
              }
            </select>
          }
          else
          {
            @Html.DisplayFor(model => model.Status)
          }
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.DisplayFor(model => model.Date)
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.Toys, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @foreach (var toy in Model.Toys)
          {
            foreach (var toyForCount in Model.ToyList)
            {
              if (toyForCount.Name == toy.Name)
              {
                if (Model.MissingToysList.Count == 0 || Model.Status.Equals(StatusType.Done) || Model.Status.Equals(StatusType.Ready))
                {
                  @Html.DisplayFor(model => toy.Name)
                  <br />
                }
                else
                {
                  foreach (var toyColor in Model.MissingToysList)
                  {
                    if (toyColor.Name.Equals(toy.Name))
                    {
                      Model.EditToys = false;
                      <font color="red">
                        @Html.DisplayFor(model => toy.Name)
                      </font>
                      <br />
                    }
                    else
                    {
                      @Html.DisplayFor(model => toy.Name)
                      <br />
                    }
                  }
                }
              }
            }
          }
        </div>
      </div>
      @if (Session["IsAdmin"].Equals(false) && !Model.Status.Equals(StatusType.Done) && Model.EditToys)
      {
        <div class="form-group">
          <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-success" />
          </div>
        </div>
      }

        @if (!Model.EditToys)
        {
          <font color="red">
            @Html.Raw("Please check your Toys !")
          </font>
        }
 
    </div>
  }
</div>
<div>
  @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}
